<?php
/**
 * 七牛直播公开接口API
 * 不需要验证用户身份token
 */
namespace Api\Controller;

use Common\Controller\ApiController;
use Think\Upload\Driver\Qiniu;

//require(join(DIRECTORY_SEPARATOR, array(dirname(dirname(__FILE__)), 'lib', 'Pili.php')));
class QiNiuLiveController extends ApiController{
    public function _initialize(){
        //模块初始化，重写父类方法，避免该模块进入token验证
        vendor('Pili');
    }

    public function createOrGetStream(){
//        new \Org\lib\Pili.php();

        $userid=$_GET["userid"];
        $classifyid=$_GET["classifyid"];
        $credentials = new \Qiniu\Credentials(ACCESS_KEY, SECRET_KEY); #=> Credentials Object
        $hub = new \Pili\Hub($credentials, HUB); # => Hub Object

        $roomid=M("userinfos")->where("userid=$userid")->field("roomid")->select();
        try {
            if($roomid){
                $result=M("rooms r")->join("wht_userinfos u on r.roomid=u.roomid")->where("u.userid=$userid")->field("r.webcastkeyid")->find();

                if($result["webcastkeyid"]==null){
                    $title           = NULL;     // optional, auto-generated as default 一般对应主播房间号
                    $publishKey      = NULL;     // optional, auto-generated as default 流密钥，用于生成推流鉴权凭证
                    $publishSecurity = null;     // optional, can be "dynamic" or "static", "dynamic" as default 推流鉴权策略, 一般为"static", 针对安全要求较高的UGC推流建议用"dynamic"
                    $stream = $hub->createStream($title, $publishKey, $publishSecurity); # => Stream Object
                    $data["roomcode"]="";
                    $data["webcastkeyid"]=$stream->id;
                    $data["authentication"]=$publishKey;
                    $data["classifyid"]=$classifyid;
                    $roomid=M("rooms")->add($data);
                    if($roomid){
                        $id=M("userinfos")->where("userid=$userid")->setField("roomid",$roomid);
                    }
                    return $this->myApiPrint("success","200",$stream->toJSONString());

                }else{
                    $stream = $hub->getStream($result["webcastkeyid"]);
                    return $this->myApiPrint("success","200",$stream->toJSONString());
                }


            }else{
                $title           = NULL;     // optional, auto-generated as default 一般对应主播房间号
                $publishKey      = NULL;     // optional, auto-generated as default 流密钥，用于生成推流鉴权凭证
                $publishSecurity = null;     // optional, can be "dynamic" or "static", "dynamic" as default 推流鉴权策略, 一般为"static", 针对安全要求较高的UGC推流建议用"dynamic"
                $stream = $hub->createStream($title, $publishKey, $publishSecurity); # => Stream Object
                $data["roomcode"]="";
                $data["webcastkeyid"]=$stream->id;
                $data["authentication"]=$publishKey;
                $data["classifyid"]=$classifyid;
                $roomid=M("rooms")->add($data);
                if($roomid){
                    $id=M("userinfos")->where("userid=$userid")->setField("roomid",$roomid);
                }
                return $this->myApiPrint("success","200",$stream->toJSONString());




            }
        } catch (Exception $e) {
            return $this->myApiPrint("error","300");
        }

    }

    //获取流列表
    public function getStreamList(){
        try {
            $credentials = new \Qiniu\Credentials(ACCESS_KEY, SECRET_KEY); #=> Credentials Object
            $hub = new \Pili\Hub($credentials, HUB); # => Hub Object

            $marker       = NULL;      // optional
            $limit        = NULL;      // optional
            $title_prefix = NULL;      // optional
            $status       = NULL;      // optional, "connected" only

            $result = $hub->listStreams($marker, $limit, $title_prefix, $status); # => Array

            $res=var_export($result);
            $this->myApiPrint("success","200",$res);
//            foreach($result as $item=>$value){
//                var_dump($item."SD".$value);
//            }

            var_dump();
        } catch (Exception $e) {
            echo "listStreams() failed. Caught exception: ",  $e->getMessage(), "\n";
        }
    }


    //更新流
    public function updateStream(){
        $userid=$_GET["userid"];
        $disabled=$_GET["disabled"];
        try {
            $credentials = new \Qiniu\Credentials(ACCESS_KEY, SECRET_KEY); #=> Credentials Object
            $hub = new \Pili\Hub($credentials, HUB); # => Hub Object

            $result=M("rooms r")->join("wht_userinfos u on r.roomid=u.roomid")->where("u.userid=$userid")->field("r.webcastkeyid")->find();
            $stream = $hub->getStream($result["webcastkeyid"]);

            $stream->publishKey      = $stream["publishKey"]; // optional
            $stream->publishSecurity = "static";           // optional, can be "dynamic" or "static"
            $stream->disabled        = $disabled;               // optional, can be "true" of "false"

            $stream = $stream->update(); # => Stream Object


            var_export($stream->toJSONString());


        } catch (Exception $e) {
            echo "Stream update() failed. Caught exception: ",  $e->getMessage(), "\n";
        }
    }
}